typedef struct {
    int *data;
    int front, rear, size, capacity;
} Queue;


Queue* createQueue(int capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->capacity = capacity;
    queue->size = 0;
    queue->front = 0;
    queue->rear = -1;
    queue->data = (int*)malloc(capacity * sizeof(int));
    return queue;
}


bool isEmpty(Queue* queue) {
    return queue->size == 0;
}


bool isFull(Queue* queue) {
    return queue->size == queue->capacity;
}


void enqueue(Queue* queue, int value) {
    if (isFull(queue)) return;
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->data[queue->rear] = value;
    queue->size++;
}


int dequeue(Queue* queue) {
    if (isEmpty(queue)) return -1;
    int value = queue->data[queue->front];
    queue->front = (queue->front + 1) % queue->capacity;
    queue->size--;
    return value;
}


int peek(Queue* queue) {
    if (isEmpty(queue)) return -1;
    return queue->data[queue->front];
}


void freeQueue(Queue* queue) {
    free(queue->data);
    free(queue);
}


typedef struct {
    Queue* q1;
    Queue* q2;
} MyStack;


MyStack* myStackCreate() {
    MyStack* stack = (MyStack*)malloc(sizeof(MyStack));
    stack->q1 = createQueue(100);
    stack->q2 = createQueue(100);
    return stack;
}


void myStackPush(MyStack* obj, int x) {
    enqueue(obj->q2, x);
    while (!isEmpty(obj->q1)) {
        enqueue(obj->q2, dequeue(obj->q1));
    }

    Queue* temp = obj->q1;
    obj->q1 = obj->q2;
    obj->q2 = temp;
}


int myStackPop(MyStack* obj) {
    return dequeue(obj->q1);
}


int myStackTop(MyStack* obj) {
    return peek(obj->q1);
}


bool myStackEmpty(MyStack* obj) {
    return isEmpty(obj->q1);
}


void myStackFree(MyStack* obj) {
    freeQueue(obj->q1);
    freeQueue(obj->q2);
    free(obj);
}

